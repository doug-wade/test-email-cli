
> test-email-cli@0.0.4 test /Users/dwade/foss/test-email-cli
> nyc -x tests/ -x fixtures/ ava tests/**/*.spec.js

 
 ⠋ [2K[1A[2K[G 
 ⠙ [2K[1A[2K[G 
 ⠹ [2K[1A[2K[G 
 ⠸ [2K[1A[2K[G 
 ⠼ [2K[1A[2K[G 
 ⠴ [2K[1A[2K[G 
 ⠦ [2K[1A[2K[G 
 ⠧ [2K[1A[2K[G 
 ⠇ [2K[1A[2K[G 
 ⠏ [2K[1A[2K[G 
 ⠋ [2K[1A[2K[G 
 ⠙ [2K[1A[2K[G 
 ⠹ [2K[1A[2K[G 
 ⠸ [2K[1A[2K[G 
 ⠼ [2K[1A[2K[G 
 ⠴ [2K[1A[2K[G 
 ⠦ [2K[1A[2K[G 
 ⠧ [2K[1A[2K[G 
 ⠇ [2K[1A[2K[G 
 ⠏ [2K[1A[2K[G 
 ⠋ [2K[1A[2K[G 
 ⠙ [2K[1A[2K[G 
 ⠹ [2K[1A[2K[G 
 ⠹ …

  1 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠹ …

  2 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠹ …

  3 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  3 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  4 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  5 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  6 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  7 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  8 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠼ …

  8 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠼ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠴ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠦ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠧ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠇ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠏ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠋ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠹ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠼ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠴ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠦ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠧ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠇ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠏ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠋ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠹ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠸ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠼ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠴ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠦ …

  9 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠦ …

  10 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠦ …

  11 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠦ …

  12 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠧ …

  12 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠧ …

  13 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠇ …

  13 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠏ …

  13 passed[2K[1A[2K[1A[2K[1A[2K[G 
 ⠏ sub › generate › Run generate command using its alias

  13 passed
  1 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠋ sub › generate › Run generate command using its alias

  13 passed
  1 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ sub › generate › Run generate command using its alias

  13 passed
  1 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ sub › find › Run find command correctly

  13 passed
  2 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ sub › find › Run find command using its alias

  13 passed
  3 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ sub › find › Find can be filtered by date

  13 passed
  4 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ sub › find › Find can be filtered by ticket

  13 passed
  5 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G 
 ⠙ …

  14 passed
  5 failed[2K[1A[2K[1A[2K[1A[2K[1A[2K[G
  14 passed
  5 failed

  sub › generate › Run generate command using its alias

  /Users/dwade/foss/test-email-cli/tests/sub/generate.spec.js:27

   26:   t.true(logger.info.calledOnce);                                 
   27:   t.true(logger.info.calledWith('doug+2016-11-17-1@dougwade.io'));
   28: });                                                               

  Value is not `true`:

  false

  logger.info.calledWith('doug+2016-11-17-1@dougwade.io')
  => false

  logger.info
  => Function proxy {
    args: [
      [
        'doug+2016-11-17-0@dougwade.io',
      ],
    ],
    callCount: 1,
    callIds: [
      5,
    ],
    called: true,
    calledOnce: true,
    calledThrice: false,
    calledTwice: false,
    displayName: 'spy',
    errorsWithCallStack: [
      Error {
        message: '',
      },
    ],
    exceptions: [
      undefined,
    ],
    firstCall: {
      args: [
        'doug+2016-11-17-0@dougwade.io',
      ],
      callId: 5,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: 'doug+2016-11-17-0@dougwade.io',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    id: 'spy#8',
    instantiateFake: Function create {},
    isSinonProxy: true,
    lastCall: {
      args: [
        'doug+2016-11-17-0@dougwade.io',
      ],
      callId: 5,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: 'doug+2016-11-17-0@dougwade.io',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    notCalled: false,
    returnValues: [
      undefined,
    ],
    secondCall: null,
    thirdCall: null,
    thisValues: [
      {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    ],
    toString: Function toString {},
  }

  logger
  => {
    debug: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        4,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 4,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#7',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 4,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    error: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#11',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    info: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        5,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 5,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'doug+2016-11-17-0@dougwade.io',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#8',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 5,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'doug+2016-11-17-0@dougwade.io',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    random: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#6',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    silly: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        1,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 1,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: g',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#9',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 1,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: g',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    warn: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#10',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
  }



  sub › find › Run find command correctly

  /Users/dwade/foss/test-email-cli/tests/sub/find.spec.js:16

   15:   t.true(logger.info.calledOnce);                                        
   16:   t.true(logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","da…
   17: });                                                                      

  Value is not `true`:

  false

  logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","date":"2018-12-09T06:49:06.418Z","labels":["mine"],"ticket":"2"}')
  => false

  logger.info
  => Function proxy {
    args: [
      [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
      ],
    ],
    callCount: 1,
    callIds: [
      6,
    ],
    called: true,
    calledOnce: true,
    calledThrice: false,
    calledTwice: false,
    displayName: 'spy',
    errorsWithCallStack: [
      Error {
        message: '',
      },
    ],
    exceptions: [
      undefined,
    ],
    firstCall: {
      args: [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
      ],
      callId: 6,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    id: 'spy#2',
    instantiateFake: Function create {},
    isSinonProxy: true,
    lastCall: {
      args: [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
      ],
      callId: 6,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    notCalled: false,
    returnValues: [
      undefined,
    ],
    secondCall: null,
    thirdCall: null,
    thisValues: [
      {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    ],
    toString: Function toString {},
  }

  logger
  => {
    debug: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        5,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 5,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#1',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 5,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    error: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#5',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    info: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        6,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 6,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#2',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 6,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:50.877Z","labels":["mine"],"ticket":"2"}',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    random: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#0',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    silly: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        0,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 0,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: find',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#3',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 0,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: find',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    warn: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#4',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
  }



  sub › find › Run find command using its alias

  /Users/dwade/foss/test-email-cli/tests/sub/find.spec.js:26

   25:   t.true(logger.info.calledOnce);                                        
   26:   t.true(logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","da…
   27: });                                                                      

  Value is not `true`:

  false

  logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","date":"2018-12-09T06:49:06.418Z","labels":["mine"],"ticket":"2"}')
  => false

  logger.info
  => Function proxy {
    args: [
      [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
      ],
    ],
    callCount: 1,
    callIds: [
      8,
    ],
    called: true,
    calledOnce: true,
    calledThrice: false,
    calledTwice: false,
    displayName: 'spy',
    errorsWithCallStack: [
      Error {
        message: '',
      },
    ],
    exceptions: [
      undefined,
    ],
    firstCall: {
      args: [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
      ],
      callId: 8,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    id: 'spy#8',
    instantiateFake: Function create {},
    isSinonProxy: true,
    lastCall: {
      args: [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
      ],
      callId: 8,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    notCalled: false,
    returnValues: [
      undefined,
    ],
    secondCall: null,
    thirdCall: null,
    thisValues: [
      {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    ],
    toString: Function toString {},
  }

  logger
  => {
    debug: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        7,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 7,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#7',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 7,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    error: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#11',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    info: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        8,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 8,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#8',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 8,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.037Z","labels":["mine"],"ticket":"2"}',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    random: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#6',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    silly: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        1,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 1,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: f',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#9',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 1,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: f',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    warn: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#10',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
  }



  sub › find › Find can be filtered by date

  /Users/dwade/foss/test-email-cli/tests/sub/find.spec.js:43

   42:   t.true(logger.info.calledOnce);                                        
   43:   t.true(logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","da…
   44: });                                                                      

  Value is not `true`:

  false

  logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","date":"2018-12-09T06:49:06.418Z","labels":["mine"],"ticket":"2"}')
  => false

  logger.info
  => Function proxy {
    args: [
      [
        'no test emails match those criteria',
      ],
    ],
    callCount: 1,
    callIds: [
      10,
    ],
    called: true,
    calledOnce: true,
    calledThrice: false,
    calledTwice: false,
    displayName: 'spy',
    errorsWithCallStack: [
      Error {
        message: '',
      },
    ],
    exceptions: [
      undefined,
    ],
    firstCall: {
      args: [
        'no test emails match those criteria',
      ],
      callId: 10,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: 'no test emails match those criteria',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    id: 'spy#14',
    instantiateFake: Function create {},
    isSinonProxy: true,
    lastCall: {
      args: [
        'no test emails match those criteria',
      ],
      callId: 10,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: 'no test emails match those criteria',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    notCalled: false,
    returnValues: [
      undefined,
    ],
    secondCall: null,
    thirdCall: null,
    thisValues: [
      {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    ],
    toString: Function toString {},
  }

  logger
  => {
    debug: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        9,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 9,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#13',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 9,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    error: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#17',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    info: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        10,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 10,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no test emails match those criteria',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#14',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 10,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no test emails match those criteria',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    random: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#12',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    silly: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        2,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 2,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: f',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#15',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 2,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: f',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    warn: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#16',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
  }



  sub › find › Find can be filtered by ticket

  /Users/dwade/foss/test-email-cli/tests/sub/find.spec.js:58

   57:   t.true(logger.info.calledOnce);                                        
   58:   t.true(logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","da…
   59: });                                                                      

  Value is not `true`:

  false

  logger.info.calledWith('{"email":"douglas.b.wade@gmail.com","date":"2018-12-09T06:49:06.418Z","labels":["mine"],"ticket":"2"}')
  => false

  logger.info
  => Function proxy {
    args: [
      [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
      ],
    ],
    callCount: 1,
    callIds: [
      12,
    ],
    called: true,
    calledOnce: true,
    calledThrice: false,
    calledTwice: false,
    displayName: 'spy',
    errorsWithCallStack: [
      Error {
        message: '',
      },
    ],
    exceptions: [
      undefined,
    ],
    firstCall: {
      args: [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
      ],
      callId: 12,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    id: 'spy#20',
    instantiateFake: Function create {},
    isSinonProxy: true,
    lastCall: {
      args: [
        '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
      ],
      callId: 12,
      callback: undefined,
      errorWithCallStack: Error {
        message: '',
      },
      exception: undefined,
      lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
      proxy: [Circular],
      returnValue: undefined,
      thisValue: {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    },
    notCalled: false,
    returnValues: [
      undefined,
    ],
    secondCall: null,
    thirdCall: null,
    thisValues: [
      {
        debug: Function proxy { … },
        error: Function proxy { … },
        info: [Circular],
        random: Function proxy { … },
        silly: Function proxy { … },
        warn: Function proxy { … },
      },
    ],
    toString: Function toString {},
  }

  logger
  => {
    debug: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        11,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 11,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#19',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 11,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'no last upgrade date; assuming this is freshly installed',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    error: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#23',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    info: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        12,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 12,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#20',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 12,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: '{"email":"douglas.b.wade@gmail.com","date":"2018-12-11T04:25:51.118Z","labels":["mine"],"ticket":"2"}',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    random: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#18',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
    silly: Function proxy {
      args: [
        Array [ … ],
      ],
      callCount: 1,
      callIds: [
        3,
      ],
      called: true,
      calledOnce: true,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [
        Error { … },
      ],
      exceptions: [
        undefined,
      ],
      firstCall: {
        args: Array [ … ],
        callId: 3,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: f',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      id: 'spy#21',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: {
        args: Array [ … ],
        callId: 3,
        callback: undefined,
        errorWithCallStack: Error { … },
        exception: undefined,
        lastArg: 'command: f',
        proxy: [Circular],
        returnValue: undefined,
        thisValue: [Circular],
      },
      notCalled: false,
      returnValues: [
        undefined,
      ],
      secondCall: null,
      thirdCall: null,
      thisValues: [
        [Circular],
      ],
      toString: Function toString {},
    },
    warn: Function proxy {
      args: [],
      callCount: 0,
      callIds: [],
      called: false,
      calledOnce: false,
      calledThrice: false,
      calledTwice: false,
      displayName: 'spy',
      errorsWithCallStack: [],
      exceptions: [],
      firstCall: null,
      id: 'spy#22',
      instantiateFake: Function create {},
      isSinonProxy: true,
      lastCall: null,
      notCalled: true,
      returnValues: [],
      secondCall: null,
      thirdCall: null,
      thisValues: [],
      toString: Function toString {},
    },
  }
--------------------|----------|----------|----------|----------|-------------------|
File                |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
--------------------|----------|----------|----------|----------|-------------------|
All files           |     79.4 |    57.75 |    91.78 |    78.97 |                   |
 test-email-cli     |    64.71 |       64 |    77.78 |    64.71 |                   |
  index.js          |    64.71 |       64 |    77.78 |    64.71 |... 36,48,51,52,53 |
 test-email-cli/lib |    76.07 |    44.44 |    91.49 |    75.86 |                   |
  config.js         |    86.96 |    66.67 |      100 |    86.96 |          28,37,38 |
  persister.js      |       70 |    34.62 |     87.5 |       70 |... 79,180,181,183 |
  sub.js            |    83.33 |       75 |      100 |    82.61 |       53,54,55,71 |
 test-email-cli/sub |    97.92 |       90 |      100 |    97.78 |                   |
  commands.js       |      100 |      100 |      100 |      100 |                   |
  find.js           |      100 |      100 |      100 |      100 |                   |
  generate.js       |      100 |      100 |      100 |      100 |                   |
  version.js        |    90.91 |       50 |      100 |    90.91 |                18 |
--------------------|----------|----------|----------|----------|-------------------|
npm ERR! Test failed.  See above for more details.
